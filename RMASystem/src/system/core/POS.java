/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package system.core;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import suggest.AutoSuggestor;
import static system.core.Login.db;
import system.helper.Helper;
import system.model.POSBean;
import system.model.Quantity;
import system.model.StockOutBean;
import system.model.Thresh;
import system.utility.ConnectionUtil;

/**
 *
 * @author JANSEN
 */
public class POS extends javax.swing.JFrame implements DocumentListener {

    public static Connection con = ConnectionUtil.getDBConnection(db);
    public ResultSet rs;
    public static boolean active = true;
    public boolean flag = true;
    public boolean needToInsert = true;
    POSBean b;
    DefaultTableModel model = new DefaultTableModel();
    public static int THRESHOLD = 10;
    public ArrayList<Thresh> warn = new ArrayList<>();
    public Thresh th = new Thresh();
    public static float tot = 0;
    static int x = 1;
    public static EditQty eq;
    public static Quantity q;
    public static int quantite = 1;
    public String MAX = "INV179999";
    public static int invoiceNo = 1700001;

    AutoSuggestor autoSuggestor;

 //    public String inv;
    public POS() {

        initComponents();
        searchtf.requestFocusInWindow();
        this.autoSuggestor = new AutoSuggestor(searchtf, this, null, Color.WHITE.brighter(), Color.BLUE,
                Color.RED, 0.75f) {
                    @Override
                    public boolean wordTyped(String typedWord) {

                        //create list for dictionary this in your case might be done via calling a method which queries db and returns results as arraylist
                        ArrayList<String> words = new ArrayList<>();
                        ResultSet rs = Helper.getData(con, "Select * from Warehouse");
                        try {
                            while (rs.next()) {
                                words.add(rs.getInt("ProductId") + "");
                                words.add(rs.getString("Barcode"));
                                words.add(rs.getString("ProductName"));
                                words.add(rs.getString("ProductDesc"));
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(POS.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        setDictionary(words);
                        //addToDictionary("bye");//adds a single word

                        return super.wordTyped(typedWord);//now call super to check for any matches against newest dictionary
                    }
                };
        //  setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH); 
        model.setColumnIdentifiers(new Object[]{"Product ID", "Barcode", "Product Name", "Product Description", "Category",
            "Selling Price", "Quantity"});

        table.setModel(model);

        System.out.println("init");
        invoice.setText("INVOICE NO: " + checkExistingInvoice());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new javax.swing.JDesktopPane() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        searchtf = new javax.swing.JTextField();
        searchtf.getDocument().addDocumentListener(this);
        jPanel1 = new javax.swing.JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        idtf = new javax.swing.JTextField();
        nametf = new javax.swing.JTextField();
        postf = new javax.swing.JTextField();
        invoice = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        totalItems = new javax.swing.JLabel();
        vat = new javax.swing.JLabel();
        sub = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        desktop.setBackground(new java.awt.Color(255, 255, 255));
        desktop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desktopKeyPressed(evt);
            }
        });

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        searchtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchtfActionPerformed(evt);
            }
        });
        searchtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchtfKeyPressed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Employee Information"));

        jLabel2.setText("ID:");

        jLabel3.setText("Name:");

        jLabel4.setText("Position:");

        idtf.setEditable(false);

        nametf.setEditable(false);
        nametf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nametfActionPerformed(evt);
            }
        });

        postf.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postf, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nametf)
                    .addComponent(idtf)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nametf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(postf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        invoice.setBackground(new java.awt.Color(51, 0, 102));
        invoice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        invoice.setForeground(new java.awt.Color(255, 255, 255));
        invoice.setText("INVOICE NO:");
        invoice.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        invoice.setOpaque(true);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Cart Information"));

        totalItems.setText("Total Items:");

        vat.setText("VAT: 0.00");

        sub.setText("SubTotal:");

        total.setBackground(new java.awt.Color(0, 0, 0));
        total.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        total.setForeground(new java.awt.Color(0, 255, 0));
        total.setText("TOTAL: P 0.0");
        total.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        total.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalItems, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(vat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sub, totalItems, vat});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(totalItems, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vat, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sub, totalItems, vat});

        jLabel1.setText("Search");

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Close [F9]");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Process [F5]");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        jButton3.setText("Edit Quantity [F7]");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete [F8]");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Discount [F6]");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton3, jButton4, jButton5});

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(desktopLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(desktopLayout.createSequentialGroup()
                        .addComponent(searchtf, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 145, Short.MAX_VALUE))
                    .addGroup(desktopLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(jScrollPane1)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopLayout.createSequentialGroup()
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(desktopLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, desktopLayout.createSequentialGroup()
                        .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        desktop.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(searchtf, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(invoice, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public String checkExistingInvoice() {
        ResultSet rs;

   //     String inv = "INV" + invoiceNo;
        rs = Helper.getData(con, "Select * from StockOut Order by InvoiceNo desc ");

        try {
            if (rs.next()) {
                /*     System.out.println(inv + " " + rs.getString("InvoiceNo"));
                 if(inv.equals(rs.getString("InvoiceNo"))){  //check where if the invoice no here is equal to the invoice of db
                 invoiceNo++;                     //if true then increment since it exists in the db and replace inv
                 inv = "INV" + invoiceNo;
                 System.out.println(inv + " =  " + rs.getString("InvoiceNo"));
                 }else{    //otherwise we return invoice number string
                 return inv;
                 } */
                String inv = rs.getString("InvoiceNo").replace("INV", "");
                int invoiceNo = Integer.parseInt(inv);
                invoiceNo++;
                System.out.println(invoiceNo + "@@@@@@@@@@@@@");
                return "INV" + invoiceNo;
            } else {
                return "INV" + 1700001;
            }

        } catch (SQLException ex) {
            Logger.getLogger(POS.class.getName()).log(Level.SEVERE, null, ex);
        }
        return MAX;
        //   return inv;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        POSProcess pro = new POSProcess();
        pro.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        close();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void desktopKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desktopKeyPressed
        searchtf.setFocusTraversalKeysEnabled(false);
        if (searchtf.isFocusOwner() && evt.getKeyCode() == java.awt.event.KeyEvent.VK_F7) {
            System.out.println("Check");
            process();
        }
        if (searchtf.isFocusOwner() && evt.getKeyCode() == java.awt.event.KeyEvent.VK_TAB) {
            table.requestFocusInWindow();
        }


    }//GEN-LAST:event_desktopKeyPressed

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed
        if (table.isFocusOwner() && evt.getKeyCode() == java.awt.event.KeyEvent.VK_TAB) {
            searchtf.requestFocusInWindow();
        }

        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_F6) {
            if (table.getSelectedRow() > 0) {
                editqty();
            } else {
                JOptionPane.showMessageDialog(this, "No item selected", "Cannot edit quantity",
                        JOptionPane.WARNING_MESSAGE);
            }

        }
    }//GEN-LAST:event_tableKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (table.getSelectedRow() >= 0) {
            editqty();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void nametfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nametfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nametfActionPerformed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed


    }//GEN-LAST:event_jButton2KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        deleteItem();            
    }//GEN-LAST:event_jButton4ActionPerformed

    private void searchtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchtfActionPerformed


    }//GEN-LAST:event_searchtfActionPerformed

    private void searchtfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchtfKeyPressed
        if (searchtf.isFocusOwner()) {
            if (evt.getKeyCode() == KeyEvent.VK_F7) {
                if (table.getSelectedRow() >= 0) {
                    editqty();
                }
            }

            if (evt.getKeyCode() == KeyEvent.VK_F5) {
                POSProcess pro = new POSProcess();
                pro.setVisible(true);
            }
            
            if(evt.getKeyCode() == KeyEvent.VK_F8){
                deleteItem();
            }
            
            if(evt.getKeyCode() == KeyEvent.VK_F9){
                close();
            }
        }

    }//GEN-LAST:event_searchtfKeyPressed
    public void editqty() {
        eq = new EditQty();
        int y = (int) model.getValueAt(table.getSelectedRow(), 6);
        q = new Quantity(y);
        eq.displayQuant(q, model, table.getSelectedRow(), (String) model.getValueAt(table.getSelectedRow(), 1),
                quantite);
        eq.setVisible(true);
    }

    public void notifyTheUser(StringBuffer buff) {
        String mes = "The following items is now less than the threshold: \n";
        if (buff.length() > 0) {
            JOptionPane.showMessageDialog(this, mes + buff.toString(), "Quantity Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    public void close(){
         try {
            ResultSet rs = Helper.getData(con, "Select * from POS");
            String mes = "There are still data unprocessed. Cannot Close.";
            if (!rs.next()) {
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, mes, "Data Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(POS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteItem(){
        System.out.println("Deleting");
        if (table.getSelectedRow() >= 0) {
            System.out.println("Deleted");
            String barcode = model.getValueAt(table.getSelectedRow(), 1).toString();
            if (Helper.delete(con, "Delete from POS where Barcode = '" + barcode + "' ")) {;
                System.out.println("Delete Success");
                ResultSet pos = Helper.getData(con, "Select * from POS");
                float st = 0;
                try {
                    while (pos.next()) {
                        System.out.println("DELETE INFO:  Name: " + pos.getString("ProductName") + " Quantity: "
                                + pos.getInt("Qty") + " Price: "
                                + pos.getFloat("SellPrice") + " --- Old Total: " + tot + " New Total: "
                                + pos.getInt("Qty") * pos.getFloat("SellPrice"));
                        tot = pos.getInt("Qty") * pos.getFloat("SellPrice");
                        st = st + tot;

                        System.out.println("st: " + st + " total " + tot);

                    }
                    total.setText("TOTAL: P " + st);
                    tot = st;
                } catch (SQLException ex) {
                    Logger.getLogger(POS.class.getName()).log(Level.SEVERE, null, ex);
                }
                model.removeRow(table.getSelectedRow());
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(POS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(POS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(POS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(POS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    // Set System L&F
                    UIManager.setLookAndFeel(
                            UIManager.getSystemLookAndFeelClassName());

                } catch (UnsupportedLookAndFeelException e) {
                    e.printStackTrace();
                } catch (ClassNotFoundException e) {
                    // handle exception
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    // handle exception
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    // handle exception
                    e.printStackTrace();
                }
                new POS().setVisible(true);
            }
        });
    }

    private void updateRow(String barcode, Object[] data) {

        if (data.length > 8) {
            System.out.println("error");
            throw new IllegalArgumentException("data[] is to long");
        }

        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 1).equals(barcode)) {
                for (int j = 1; j < data.length + 1; j++) {
                    model.setValueAt(data[j - 1], i, j);
                }
            }
        }
    }

    private void process() {
        try {
            int change = 0;
            int qty = 0;
            String barcode = "";
            String query = "Select * from POS";
            String sql = "Select * from SellingArea";
            StringBuffer buff = new StringBuffer();
            StockOutBean sb;
            ResultSet rs = Helper.getData(con, query);

            while (rs.next()) {
                ResultSet rs2 = Helper.getData(con, sql);
                barcode = rs.getString("Barcode");
                qty = rs.getInt("Qty");
                while (rs2.next()) {
                    if (barcode.equals(rs2.getString("Barcode"))) {
                        change = rs2.getInt("StockQty") - qty;
                        System.out.println("barcode: " + rs.getString("barcode") + " avail: " + rs2.getInt("StockQty")
                                + " quantity: " + qty + " change: " + change);
                        if (change > 0) {
                            if (Helper.updatePos(con, change, barcode)) {
                                System.out.println("Success");
                                Object[] data = new Object[]{"120032", "dsfa",
                                    "this row has changed", "yep",
                                    "testing", 12, ++x};
                                //    updateRow(barcode, data);
                            }
                        }
                        if (change <= THRESHOLD) {
                            th.setBarcode(barcode);
                            th.setQty(change);
                            warn.add(th);
                        }
                        break;
                    }
                }
                x++;
            }
            rs = Helper.getData(con, query);
            System.out.println(qty + " " + x);

            Iterator<Thresh> iter = warn.iterator();
            while (iter.hasNext()) {
                Thresh t = (Thresh) iter.next();
                buff.append("Barcode: ")
                        .append(t.getBarcode())
                        .append(" Quantity: ").append(t.getQty()).append("\n");
            }

           // notifyTheUser(buff);

            //Insert POS to stockout
            String invoiceNumber = checkExistingInvoice(); //check if there exists an existing invoice
            if (!invoiceNumber.equals(MAX)) { //check if the invoice reaches the maximum invoice
                // no for this year
                System.out.println("Checking existing invoice number");
                while (rs.next()) {
                    sb = new StockOutBean(rs.getInt("ProductId"), rs.getString("Barcode"), invoiceNumber,
                            rs.getString("ProductName"), rs.getString("ProductDesc"), rs.getString("Category"),
                            rs.getInt("Qty"), rs.getFloat("SellPrice"), rs.getFloat("SellPrice") * rs.getInt("Qty"),
                            rs.getTimestamp("DateAdded"));
                    if (Helper.insertToStockOut(con, sb)) {
                        System.out.println("Insert to Stock Out success");
                    }
                }
            }

            if (Helper.delete(con, "Delete from POS")) {
                System.out.println("Delete Success!");
            }
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            total.setText("TOTAL: P 0.0");
            invoice.setText("INVOICE NO: " + checkExistingInvoice());
            tot = 0;
            searchtf.requestFocusInWindow();
        } catch (SQLException ex) {
            Logger.getLogger(POS.class.getName()).log(Level.SEVERE, null, ex);

        }
    }

    public void findUsers() {
        Runnable doHighlight = new Runnable() {
            @Override
            public void run() {
                // your highlight code
                char c[] = searchtf.getText().toCharArray();
                String word = searchtf.getText();
                if (searchtf.getText() != null && word.length() == 13) {
                    for (int i = 0; i < c.length; i++) {
                        if (!Character.isDigit(c[i])) {
                            flag = false;
                            break;
                        }
                    }
                }
                detectDuplicateAndUpdate(word);

                if (flag) {
                    try {
                        ResultSet acc = Helper.getData(con, "Select * from SellingArea where barcode like '" + word + "'  ");
                        // add to table
                        if (!acc.next()) {
                            System.out.println("No records found");
                        } else {
                            do {
                                int pid = acc.getInt("ProductId");
                                String barcode = acc.getString("Barcode");
                                String pname = acc.getString("ProductName");
                                String pdesc = acc.getString("ProductDesc");
                                String catg = acc.getString("Category");
                                float sprice = acc.getFloat("SellPrice");
                                int sqty = acc.getInt("StockQty");
                                x++;
                                b = new POSBean(pid, barcode, pname, pdesc, catg, sprice, 1);
                                Object[] data = new Object[]{pid, barcode, pname, pdesc, catg, sprice, 1};
                                model.addRow(data);
               // table.requestFocusInWindow();

                                int lastRow = table.convertRowIndexToView(model.getRowCount() - 1);
                                table.setRowSelectionInterval(lastRow, lastRow);

                            } while (acc.next());
                    //close for else

                            if (Helper.insertToPOS(con, b)) {
                                System.out.println("Insert Successful");
                                ResultSet rs = Helper.getData(con, "Select * from POS");
                                while (rs.next()) {
                                    if (rs.getString("Barcode").equals(word)) {
                                        //  System.out.println("old total: " + tot);
                                        System.out.println("total: " + tot);
                                        tot += rs.getInt("Qty") * rs.getFloat("SellPrice");
                                        sub.setText("P " + tot);
                                        total.setText("TOTAL: P " + tot);
                            // System.out.println("new total: " + rs.getInt("Qty") + " x " +  rs.getFloat("SellPrice")
                                        //          + " = " + tot);
                                    }
                                }

                                searchtf.setText("");
                            } // if insert success
                        } // end of else
                    } catch (SQLException ex) {
                        Logger.getLogger(POS.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }  //closing for if flag = true
                // closing for length
            }
        };
        SwingUtilities.invokeLater(doHighlight);
    }

    public void detectDuplicateAndUpdate(String Barcode) {
        ResultSet dup = Helper.getData(con, "Select * from POS where Barcode = '" + Barcode + "' ");
        ResultSet pos;
        int qty = 1;
        float st = 0;

        try {
            if (!dup.next()) {
                //  System.out.println("No record found yet in POS");
                flag = true;
            } else {
                System.out.println("Record found");
                flag = false;

                qty = dup.getInt("Qty");
                qty++;
                System.out.println("Qty++: " + qty);
                //    System.out.println("Before Quantity: " + dup.getInt("Qty"));
                if (Helper.updatePosDup(con, qty, Barcode)) {
                    pos = Helper.getData(con, "Select * from POS");
                    System.out.println("Supposed New Quantity: " + dup.getInt("Qty"));

                   //   if(!rs.next()) System.out.println("FUck dis");
                    //   else{
                    //  System.out.println("After Quantity: " + rs.getInt("Qty"));
                    //    System.out.println("Update qty success");
                    for (int i = 0; i < model.getRowCount(); i++) {
                        System.out.println("equal? " + model.getValueAt(i, 1).equals(Barcode));
                        if (model.getValueAt(i, 1).equals(Barcode)) {

                            model.setValueAt(qty, i, 6);
                             //    System.out.println("old total: " + tot);                           
                            //  System.out.println("new total: " + tot);
                            break;

                        }
                    }
                    while (pos.next()) {
                        System.out.println("1st st " + st);
                        System.out.println(" Name: " + pos.getString("ProductName") + " Quantity: "
                                + pos.getInt("Qty") + " Price: "
                                + pos.getFloat("SellPrice") + " *** Old Total: " + tot + " New Total: "
                                + pos.getInt("Qty") * pos.getFloat("SellPrice"));
                        tot = pos.getInt("Qty") * pos.getFloat("SellPrice");
                        st = st + tot;
                        System.out.println("2nd st " + st);
                        sub.setText("P " + st);
                        total.setText("TOTAL: P " + st);

                    }
                    tot = st;

                    searchtf.setText("");

                    //       }
                }
            }
        } catch (SQLException ex) {
            flag = true;
            Logger.getLogger(POS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        if (searchtf.getText().trim().length() == 13) {
            findUsers();
        } else if(searchtf.getText().trim().length() < 13) {
         //   autoSuggestor.checkForAndShowSuggestions();
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        if (searchtf.getText() != null) {
            autoSuggestor.checkForAndShowSuggestions();
        }
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JTextField idtf;
    private javax.swing.JLabel invoice;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nametf;
    private javax.swing.JTextField postf;
    private javax.swing.JTextField searchtf;
    private javax.swing.JLabel sub;
    private javax.swing.JTable table;
    public static javax.swing.JLabel total;
    private javax.swing.JLabel totalItems;
    private javax.swing.JLabel vat;
    // End of variables declaration//GEN-END:variables
   class POSProcess extends javax.swing.JFrame implements DocumentListener {

        // public float total = 0;
        float check = 0;
        public boolean success = false;

        public POSProcess() {
            initComponents();
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            setLocationRelativeTo(null);
        }

        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents() {

            panelForProcess = new javax.swing.JPanel();
            amountLabel = new javax.swing.JLabel();
            changeLabel = new javax.swing.JLabel();
            changeTf = new javax.swing.JTextField();
            amountTf = new javax.swing.JTextField();
            processBtn = new javax.swing.JButton();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            amountLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            amountLabel.setText("Amount:");

            changeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            changeLabel.setText("Change:");

            changeTf.setEditable(false);

            processBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            processBtn.setText("Process");
            processBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    processBtnActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout panelForProcessLayout = new javax.swing.GroupLayout(panelForProcess);
            panelForProcess.setLayout(panelForProcessLayout);
            panelForProcessLayout.setHorizontalGroup(
                    panelForProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelForProcessLayout.createSequentialGroup()
                            .addGroup(panelForProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelForProcessLayout.createSequentialGroup()
                                            .addGap(61, 61, 61)
                                            .addGroup(panelForProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(amountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(changeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(panelForProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(changeTf, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(amountTf, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(panelForProcessLayout.createSequentialGroup()
                                            .addGap(105, 105, 105)
                                            .addComponent(processBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap(101, Short.MAX_VALUE))
            );
            panelForProcessLayout.setVerticalGroup(
                    panelForProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelForProcessLayout.createSequentialGroup()
                            .addGap(47, 47, 47)
                            .addGroup(panelForProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(amountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(amountTf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(panelForProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(changeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(changeTf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(processBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(27, Short.MAX_VALUE))
            );

            amountTf.getDocument().addDocumentListener(this);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelForProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelForProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );

            pack();
        }// </editor-fold>                        

        private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {
            if (check < 0) {
                JOptionPane.showMessageDialog(this, "Change is negative", "Proces Error", JOptionPane.ERROR_MESSAGE);
                amountTf.setText("");
                changeTf.setText("");
            } else {
                process();
                dispose();
            }

        }

        /**
         * @param args the command line arguments
         */
        // Variables declaration - do not modify                     
        private javax.swing.JLabel amountLabel;
        private javax.swing.JTextField amountTf;
        private javax.swing.JLabel changeLabel;
        private javax.swing.JTextField changeTf;
        private javax.swing.JPanel panelForProcess;
        public javax.swing.JButton processBtn;
        // End of variables declaration                   

        @Override
        public void insertUpdate(DocumentEvent e) {
            if (amountTf.getText() != null && amountTf.getText().trim().length() > 0) {
                float amt = Float.parseFloat(amountTf.getText());
                float chang = 0;
                chang = amt - tot;
                check = chang;
                System.out.println(tot);
                changeTf.setText(chang + "");
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            if (amountTf.getText() != null && amountTf.getText().trim().length() > 0) {
                float amt = Float.parseFloat(amountTf.getText());
                float chang = 0;
                chang = amt - tot;
                check = chang;
                System.out.println(tot);
                changeTf.setText(chang + "");
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

    }

}
